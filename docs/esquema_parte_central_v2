Que formato de archivo usar?
    Justificar porque no FAST5
    Justificar porque no SLOW5
    Decir entonces que se usa POD5 y que existe un conversor entre formatos
    POD5 tiene una libería asociada. Esta librería se modifica => Explicar porqué se modifica la libería y no se produce un producto standalone => por ejemplo, se produce un código más prolijo (por ejemplo se evita bypassear abstracciones de la librería) con la capacidad de incorporarlo en un proyecto open source. Además quedan resueltos varios aspectos que producen una mejor solución como random access y paralelismo, aspectos cruciales para el análisis de grandes volúmenes de datos, como es posible en bioinformática.
    Esto produce un significativo aumento en esfuerzo de comprensión de una codebase existente y un subsecuente mayor esfuerzo de documentación.

Que datos se almacenan?
    Introducción
        Se guardan 3 estructuras tabulares en un archivo POD5: signal, read y runInfo
        Definir read
        Definir señal
        Definir runInfo
    Esquema de las tablas
        Las tablas no están aisladas entre si. Mencionar multiplicidades
        Dar dibujo de cajas que un read tiene n señales y etc
        Dar dibujo de claves y claves foraneas
        Mencionar que se puede recuperar por offset en la tabla
        Explicar xq un read tiene n registros de señal y por tanto explicar los chunks
        Mencionar que algunos datos no se guardan en crudo en las tablas. Por ejemplo, el tipo de poro no se guarda como un string sino como un índice a un diccionario que tiene el string, para evitar deduplicación de datos
        Poner imagen de tablas con los atributos
        Explicar detalladamente cada campo de una tabla y los tipos de datos que tiene.

Especificando el formato POD5
    Introduccion
        POD5 es un wrapper a 3 tablas de Arrow
        Esquema donde se especifica serialiacion de alto nivel de POD5 y explicar las decisiones de diseño
        POD5 esta basado en Arrow porque da x beneficios.
            Formato preestablecido. De datos columnares => Puede mejorar compresion de otras cosas pero no se usa para señales
            Aprovecha SIMD (AVX-512) con padding (con dibujo)
            Objetos inmutables dando facilidades para paralelismo
            Zero copy
            Random access a nvel de batch
            Se utiliza en librerías de big data y HPC que demuestras su utilidad para el procesado eficiente de grandes volúmenes de datos.
    A continuación se da una introducción a Arrow. Esto hará más precisos algunos conceptos antes mencionados y se introducirá un esquema de responsabilidades que será relevante a futuro
        

    Un primer acercamiento a Arrow
        Introduccion
            Como POD5 utiliza Arrow, la serialización explícita de los archivos se termina de definir según la especificación de Arrow. Además muchas decisiones de diseño de POD5 y por tanto del producto producido en este trabajo dependen del funcionamiento de Arrow. Luego, para establecer bases para lo que resta del documento es relevante explicar algunos conceptos de Arrow, seguido de cómo POD5 utiliza estos conceptos.
        Organización en capas de Arrow
            Existe capa física, capa unidimensional y bidimensional. 
        Datatypes => Los datatypes mencionados en la descripcion de cada uno de los campos de las tablas son datatypes de Arrow
        Arrays
        Esquemas
        Tablas
        Batch
            nivel archivo
        Diferencia table vs record batch (imagen)
    Como POD5 utiliza estos conceptos.
        Las tablas almacenadas no son estrictamente tablas de Arrow, más bien son un conjunto de record batches
        La lectura y escritura se hace a niveles de batches. Especializando record batches por cada tabla
        La arquitectura de escritura y lectura es muy similar a la de Arrow.
        El tipo de compresion se marca con un datatype específico a la señal.
        La serializacion está dada según el formato Arrow.
        El esquema de lectura se separa en reader y record batches (análogamente el esquema de escritura), de forma similar a cómo fue presentado en la sección sobre Arrow. Esto tiene impacto sobre donde se realiza la compresión y por tanto que modificaciones fueron realizadas.


Especificando la librería
    Introduccion
        Presentado el formato de archivo hay que ver como se opera con ellos. Además, el producto presentado se basa en una modificación de esta librería por lo que corresponde especificarla para posteriormente describir que cambios se hacen sobre ella.
    Atributos de calidad
        explicar atributos de calidad a mantener

    Estructura general de la liberia
        Que APIs exponen y diferencias a alto nivel entre ellas
            Xq solo mantengo API de C

        Ejemplo de lectura desde C, en pseudocodigo
        Notar que el signal batch no aparece mencionado en el pseudocodigo
            Explicar que la vision que tiene un cliente sobre los batches es distinta a las visiones externas.
        Explicar los tipos de batches con sus esquemas. Explicar readers y explicar responsabilidades de cada uno
        Explicar

    El record batch a nivel de nivel C++
        Código ejemplo de lectura y escritura Arrow para dar una idea de cómo se organiza internamente la lectura y escritura


El producto construido: una primera aproximacion
    Introduccion
        diagrama ahora si de alto nivel de los componentes de mi código
        porqué integrarse a la liberia y no hacer un producto standalone
        porqué no se extiene libería de Python.

Cambios realizados a la libreria
    